// src/hooks/useRedirectToCheckout.ts
import { useCallback, useState } from 'react';
import { useUserTimezone } from './useFormattedTimezone';
import { useClientAuthSession } from './useClientAuthSession';
import { addDoc, collection, getFirestore } from 'firebase/firestore';
import { Booking, BookingStatus } from 'lib/booking-types';

export interface SlotAvailability {
  serviceId: string;
  startDateTime: string;
  duration: number; // In minutes
}

export const useRedirectToCheckout = () => {
  const timezone = useUserTimezone();
  const { firestore, session } = useClientAuthSession() || {};
  const [redirecting, setRedirecting] = useState<boolean>(false);

  const checkoutSlot = useCallback(
    async (slotAvailability: SlotAvailability) => {
      if (!firestore || !session?.userId) {
        console.error('Missing firestore or user session');
        return;
      }

      setRedirecting(true);

      try {
        // Create a booking in Firestore
        const booking: Booking = {
          id: '', // Auto-generated by Firestore
          status: BookingStatus.PENDING,
          serviceId: slotAvailability.serviceId,
          memberId: session.userId,
          createdAt: new Date().toISOString(),
          startDate: slotAvailability.startDateTime,
          title: '', // Populate later or via service name
          slot: {
            startDateTime: slotAvailability.startDateTime,
            duration: slotAvailability.duration,
          },
        };

        const bookingRef = await addDoc(collection(firestore, 'bookings'), booking);

        // Redirect to checkout page with booking ID
        const checkoutUrl = `/checkout/booking/${bookingRef.id}?timezone=${encodeURIComponent(timezone)}`;
        window.location.assign(checkoutUrl);

        setTimeout(() => {
          setRedirecting(false);
        }, 2000);
      } catch (error) {
        console.error('Checkout error:', error);
        setRedirecting(false);
      }
    },
    [firestore, session, timezone]
  );

  return { checkoutSlot, redirecting };
};